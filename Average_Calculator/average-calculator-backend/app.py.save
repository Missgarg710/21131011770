from flask import Flask, jsonify, request
import requests
import threading
import time

app = Flask(__name__)

# Configuration
WINDOW_SIZE = 10
TIMEOUT = 0.5  # 500 milliseconds

# Test Server API URLs
API_URLS = {
    'p': "http://20.244.56.144/test/primes",
    'f': "http://20.244.56.144/test/fibo",
    'e': "http://20.244.56.144/test/even",
    'r': "http://20.244.56.144/test/rand"
}

# Shared data
stored_numbers = []
lock = threading.Lock()

def fetch_numbers(numberid):
    try:
        response = requests.get(API_URLS[numberid], timeout=TIMEOUT)
        response.raise_for_status()
        numbers = response.json().get('numbers', [])
        return numbers
    except (requests.RequestException, ValueError):
        return []

def update_numbers(new_numbers):
    global stored_numbers
    with lock:
        prev_state = stored_numbers.copy()
        for num in new_numbers:
            if num not in stored_numbers:
                if len(stored_numbers) >= WINDOW_SIZE:
                    stored_numbers.pop(0)
                stored_numbers.append(num)
        curr_state = stored_numbers.copy()
    return prev_state, curr_state

def calculate_average(numbers):
    if not numbers:
        return 0
    return sum(numbers) / len(numbers)

@app.route('/numbers/<numberid>', methods=['GET'])
def get_numbers(numberid):
    if numberid not in API_URLS:
        return jsonify({"error": "Invalid number ID"}), 400

    start_time = time.time()

    new_numbers = fetch_numbers(numberid)
    prev_state, curr_state = update_numbers(new_numbers)
    avg = calculate_average(curr_state)

    response_time = time.time() - start_time
    if response_time > TIMEOUT:
        return jsonify({"error": "Request timed out"}), 504

    return jsonify({
        "windowPrevState": prev_state,
        "windowCurrState": curr_state,
        "numbers": new_numbers,
        "avg": round(avg, 2)
    })

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=9876)

